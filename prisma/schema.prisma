generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ResearchCategory {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String        @unique
  slug         String        @unique
  description  String?
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  publications Publication[]

  @@map("research_categories")
}

model Author {
  id                 String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String
  email              String?             @unique
  affiliation        String?
  bio                String?
  createdAt          DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  publicationAuthors PublicationAuthor[]

  @@map("authors")
}

model Publication {
  id                 String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title              String
  abstract           String?
  journal            String?
  publicationYear    Int?                @map("publication_year")
  publicationType    String              @default("Journal Article") @map("publication_type")
  doi                String?
  pdfUrl             String?             @map("pdf_url")
  citations          Int                 @default(0)
  categoryId         String?             @map("category_id") @db.Uuid
  isFeatured         Boolean             @default(false) @map("is_featured")
  createdAt          DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime            @default(now()) @map("updated_at") @db.Timestamptz(6)
  publicationAuthors PublicationAuthor[]
  category           ResearchCategory?   @relation(fields: [categoryId], references: [id])

  @@map("publications")
}

model PublicationAuthor {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  publicationId String      @map("publication_id") @db.Uuid
  authorId      String      @map("author_id") @db.Uuid
  authorOrder   Int         @default(1) @map("author_order")
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  author        Author      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  publication   Publication @relation(fields: [publicationId], references: [id], onDelete: Cascade)

  @@unique([publicationId, authorId])
  @@map("publication_authors")
}

model ProgramArea {
  id             String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String                  @unique
  slug           String                  @unique
  description    String?
  heroImage      String?                 @map("hero_image")
  seoTitle       String?                 @map("seo_title")
  seoDescription String?                 @map("seo_description")
  orderIndex     Int                     @default(0) @map("order_index")
  icon           String?                 // New: icon name or URL
  createdAt      DateTime                @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime                @default(now()) @map("updated_at") @db.Timestamptz(6)
  partners       ProgramAreaPartner[]
  teamMembers    ProgramAreaTeamMember[]
  projects       Project[]
  features       ProgramAreaFeature[]    // New: relation to features

  @@map("program_areas")
}

model ProgramAreaFeature {
  id             String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  programArea    ProgramArea @relation(fields: [programAreaId], references: [id])
  programAreaId  String      @db.Uuid
  title          String
  subtitle       String?
  description    String?
  image          String?
  orderIndex     Int         @default(0)
  createdAt      DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime    @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@map("program_area_features")
}

model Project {
  id             String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  programAreaId  String?              @map("program_area_id") @db.Uuid
  title          String
  description    String?
  overview       String?
  location       String?
  duration       String?
  status         ProjectStatus        @default(active)
  budget         String?
  beneficiaries  String?
  impactMetrics  String[]             @map("impact_metrics")
  image          String?
  heroImage      String?              @map("hero_image")
  orderIndex     Int                  @default(0) @map("order_index")
  startDate      DateTime?            @map("start_date") @db.Date
  endDate        DateTime?            @map("end_date") @db.Date
  slug           String?              @unique
  createdAt      DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime             @default(now()) @map("updated_at") @db.Timestamptz(6)
  projectContent ProjectContent[]
  customFields   ProjectCustomField[]
  media          ProjectMedia[]
  stakeholders   ProjectStakeholder[]
  updates        ProjectUpdate[]
  programArea    ProgramArea?         @relation(fields: [programAreaId], references: [id], onDelete: Cascade)

  @@map("projects")
}

model ProjectCustomField {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId  String   @map("project_id") @db.Uuid
  fieldName  String   @map("field_name")
  fieldValue String   @map("field_value")
  fieldType  String   @default("text") @map("field_type")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_custom_fields")
}

model ProjectMedia {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId String    @map("project_id") @db.Uuid
  fileUrl   String    @map("file_url")
  fileType  MediaType @map("file_type")
  fileName  String?   @map("file_name")
  fileSize  Int?      @map("file_size")
  caption   String?
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  project   Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_media")
}

model ProjectStakeholder {
  id           String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId    String          @map("project_id") @db.Uuid
  name         String
  email        String?
  phone        String?
  organization String?
  role         String?
  type         StakeholderType @default(team_member)
  createdAt    DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  project      Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_stakeholders")
}

model ProjectUpdate {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId   String   @map("project_id") @db.Uuid
  title       String
  description String?
  updateDate  DateTime @default(now()) @map("update_date") @db.Date
  milestone   Boolean  @default(false)
  createdBy   String?  @map("created_by") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_updates")
}

model ProgramAreaTeamMember {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  programAreaId String      @map("program_area_id") @db.Uuid
  name          String
  title         String?
  role          String?
  image         String?
  email         String?
  bio           String?
  orderIndex    Int         @default(0) @map("order_index")
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  programArea   ProgramArea @relation(fields: [programAreaId], references: [id], onDelete: Cascade)

  @@map("program_area_team_members")
}

model ProgramAreaPartner {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  programAreaId String      @map("program_area_id") @db.Uuid
  name          String
  logo          String?
  website       String?
  description   String?
  orderIndex    Int         @default(0) @map("order_index")
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamptz(6)
  programArea   ProgramArea @relation(fields: [programAreaId], references: [id], onDelete: Cascade)

  @@map("program_area_partners")
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String   @unique
  password  String
  name      String?
  role      String   @default("user")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@map("users")
}

model TimelineEvent {
  id          Int      @id @default(autoincrement())
  year        Int
  title       String   @db.VarChar(255)
  description String
  sortOrder   Int      @default(0) @map("sort_order")
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(6)

  @@map("timeline_events")
}

model GlobeData {
  id          Int      @id @default(autoincrement())
  title       String   @db.VarChar(255)
  description String?
  latitude    Decimal  @db.Decimal(10, 8)
  longitude   Decimal  @db.Decimal(11, 8)
  category    String?  @db.VarChar(100)
  color       String?  @default("#0066cc") @db.VarChar(7)
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(6)

  @@map("globe_data")
}

model Report {
  id          Int           @id @default(autoincrement())
  title       String        @db.VarChar(255)
  description String
  uploadDate  DateTime?     @default(now()) @map("upload_date") @db.Timestamp(6)
  published   Boolean?      @default(false)
  createdAt   DateTime?     @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt   DateTime?     @default(now()) @map("updated_at") @db.Timestamp(6)
  files       ReportFile[]
  photos      ReportPhoto[]

  @@map("reports")
}

model ReportFile {
  id           Int       @id @default(autoincrement())
  reportId     Int?      @map("report_id")
  filename     String    @db.VarChar(255)
  originalName String    @map("original_name") @db.VarChar(255)
  filePath     String    @map("file_path") @db.VarChar(500)
  fileSize     Int?      @map("file_size")
  mimeType     String?   @map("mime_type") @db.VarChar(100)
  createdAt    DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  report       Report?   @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@map("report_files")
}

model ReportPhoto {
  id           Int       @id @default(autoincrement())
  reportId     Int?      @map("report_id")
  filename     String    @db.VarChar(255)
  originalName String    @map("original_name") @db.VarChar(255)
  filePath     String    @map("file_path") @db.VarChar(500)
  altText      String?   @map("alt_text") @db.VarChar(255)
  sortOrder    Int?      @default(0) @map("sort_order")
  createdAt    DateTime? @default(now()) @map("created_at") @db.Timestamp(6)
  report       Report?   @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@map("report_photos")
}

model ProjectContent {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  projectId   String   @map("project_id") @db.Uuid
  title       String
  content     String
  contentType String   @map("content_type")
  orderIndex  Int      @default(0) @map("order_index")
  isPublished Boolean  @default(true) @map("is_published")
  author      String?
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("project_content")
}

model faculty {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String
  title              String
  department         String?
  image              String?
  specialization     String?
  email              String?  @unique
  publications       Int?
  awards             Int?
  linkedin_url       String?
  google_scholar_url String?
  created_at         DateTime @default(now()) @db.Timestamptz(6)
  updated_at         DateTime @default(now()) @db.Timestamptz(6)
}

enum ProjectStatus {
  active
  completed
  on_hold
  cancelled
}

enum MediaType {
  image
  document
}

enum StakeholderType {
  team_member
  partner
  beneficiary
}

model Story {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String
  excerpt   String?
  content   String
  image     String?
  category  String?
  author    String?
  readTime  String?  @map("read_time")
  featured  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@map("stories")
}

model Admin {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@map("admins")
}
